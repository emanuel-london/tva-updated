import React, { Component } from 'react';
import { observer } from 'mobx-react';
import storage from 'Util/storage';
import PropTypes from 'prop-types';
import { Row, Col, Button, Input, Form, Select, DatePicker } from 'antd';
import Logger from 'Util/logger';
import { get, post } from 'Util/fetch';
import api from 'Constant/api';
import PanelWrapper from 'Components/PanelWrapper';
import style from './style.less';
import store from './store';

const FormItem = Form.Item;
const PAGE_SIZE = 20;
const formItemLayout = {
  labelCol: {
    span: 2,
  },
  wrapperCol: {
    span: 12
  }
};
const log = new Logger({
  namespace: 'loginComponent',
  color: 'green'
});
// TODO: 主题色的js转换
const jcText1 = '#525252';
@observer
class ImportDataForm extends Component {
  static propTypes = {
  }

  componentDidMount = async () => {
    // store.getDateTermsOps()
  }

  tplSearch = async () => {
    const { validateFields } = this.props.form;
    validateFields(async (err, values) => {
      if (err) {
        log.error(err);
      }
      const params = values;
      params.createdBy = storage.get('user').userId;
      params.pageInfo = {
        currentPage: 1,
        pageSize: PAGE_SIZE
      };
      store.setImpListInfo({
        isLoading: true
      });
      const res = await post(api.dataImportTask, params);
      store.setImpListInfo({
        list: res.data,
        pageInfo: res.pageInfo,
        isLoading: false
      });
    });
  }

  reset = () => {
    const { setFieldsValue } = this.props.form;
    store.resetImpForm(); // 妈蛋， mobx无法和mapPropsToFields配合,只能在下面手动清除了
    setFieldsValue({
      fileNameOrigin: '',
      gmtCreate: null,
      // dateTerms: 3,
      bizTypeName: ''
    });
  }

  render() {
    const { getFieldDecorator } = this.props.form;
    // let { dateTermsOps } = store
    // if (!dateTermsOps) {
    //   dateTermsOps = []
    // }
    return (
      <Form className={style.form}>
        <Row>
          <Col span={16}>
            <FormItem
              label="文件名"
              {...formItemLayout}
            >
              {getFieldDecorator('fileNameOrigin', {

              })(<Input placeholder="请输入文件名" style={{ width: '250px' }} className={style.form__input} />)}
            </FormItem>
            <FormItem
              label="导入日期"
              {...formItemLayout}
            >
              {/* //去掉日期选择条件
            <div className={style.inner__item}>
              {getFieldDecorator('dateTerms', {

              })(<Select placeholder='请选择操作' className={style.form__select}>
                {dateTermsOps.map((option, index) => { // TODO: 有个code和value ，什么鬼？
                  return <Option key={index} value={option.value}>{option.title}</Option>
                }
                )}
              </Select>)}
            </div>
        */}
              <div className={style.inner__item}>
                {/* 修正datePicker inline-block 导致的水平不对齐样式问题 */}
                <div style={{ position: 'relative', top: '-1px' }}>
                  {getFieldDecorator('gmtCreate', {

                  })(<DatePicker size="large" className={style.form__datePicker} style={{ width: '250px' }} />)}
                </div>
              </div>
            </FormItem>
            <FormItem
              label="业务对象"
              {...formItemLayout}
            >
              {getFieldDecorator('bizTypeName', {

              })(<Input placeholder="请输入业务对象" style={{ width: '250px' }} className={style.form__input} />)}
            </FormItem>
          </Col>
          <Col span={8}>
            <FormItem>
              <Button
                type="primary"
                style={{ float: 'right', marginRight: '20px', marginTop: '  108px' }}
                onClick={this.reset}
              >
                重置
              </Button>
              &nbsp;&nbsp;
              <Button
                type="primary"
                disabled={store.impListInfo.isLoading}
                onClick={this.tplSearch}
                style={{ float: 'right', marginRight: '10px', marginTop: '108px' }}
              >
                搜索
              </Button>
            </FormItem>
          </Col>
        </Row>
      </Form>
    );
  }
}
export default Form.create({
  mapPropsToFields(props) {
    const fields = {};
    for (const key of Object.keys(store.impFormInfo)) {
      fields[key] = {
        value: store.impFormInfo[key]
      };
    }
    return fields;
  },
  onFieldsChange(props, fields) {
    // const formValues = {}
    // for (const key of Object.keys(fields)) {
    //   formValues[key] = fields[key].value
    // }
    // props.store.setImpForm(formValues)
  },
  onValuesChange(props, values) {
    store.setImpForm(values);
  }
})(ImportDataForm);
